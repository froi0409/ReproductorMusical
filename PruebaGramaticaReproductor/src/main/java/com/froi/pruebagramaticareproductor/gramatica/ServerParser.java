
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.pruebagramaticareproductor.gramatica;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ServerParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ServerParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ServerParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ServerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ServerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\010\000\002\004\003\000\002\004\002" +
    "\000\002\005\005\000\002\005\003\000\002\006\003\000" +
    "\002\007\003\000\002\010\006\000\002\011\003\000\002" +
    "\011\002\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\013\004" +
    "\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\004\004\005\001\002\000\006\002\uffff\004" +
    "\uffff\001\002\000\004\101\011\001\002\000\006\002\010" +
    "\004\005\001\002\000\006\002\000\004\000\001\002\000" +
    "\004\002\001\001\002\000\006\101\013\102\ufffc\001\002" +
    "\000\004\102\014\001\002\000\004\102\ufffd\001\002\000" +
    "\004\050\015\001\002\000\006\012\ufff5\013\021\001\002" +
    "\000\010\002\ufff8\004\ufff8\102\ufff8\001\002\000\004\012" +
    "\025\001\002\000\010\002\ufffa\004\ufffa\102\ufffa\001\002" +
    "\000\004\012\ufff6\001\002\000\010\002\ufffe\004\ufffe\102" +
    "\023\001\002\000\006\012\ufff5\013\021\001\002\000\010" +
    "\002\ufffb\004\ufffb\102\ufffb\001\002\000\014\005\032\006" +
    "\033\007\030\010\026\011\031\001\002\000\004\101\ufff1" +
    "\001\002\000\004\101\034\001\002\000\004\101\ufff2\001" +
    "\002\000\004\101\ufff0\001\002\000\004\101\ufff4\001\002" +
    "\000\004\101\ufff3\001\002\000\012\002\uffee\004\uffee\101" +
    "\uffee\102\uffee\001\002\000\012\002\ufff7\004\ufff7\101\036" +
    "\102\ufff7\001\002\000\012\002\uffef\004\uffef\101\uffef\102" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\005\021\007\017\010\015\011\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\023\010\015\011\016\001" +
    "\001\000\002\001\001\000\004\012\026\001\001\000\002" +
    "\001\001\000\004\013\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ServerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ServerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ServerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ServerParser(ServerLexer lexer) {
        super(lexer);
    }
      public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr " + symbl_name_from_id(cur_token.sym) + " " + cur_token.left + " - " + cur_token.right);
    }
    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ServerParser$actions {
  private final ServerParser parser;

  /** Constructor */
  CUP$ServerParser$actions(ServerParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ServerParser$do_action_part00000000(
    int                        CUP$ServerParser$act_num,
    java_cup.runtime.lr_parser CUP$ServerParser$parser,
    java.util.Stack            CUP$ServerParser$stack,
    int                        CUP$ServerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ServerParser$result;

      /* select the action based on the action number */
      switch (CUP$ServerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).value;
		RESULT = start_val;
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ServerParser$parser.done_parsing();
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio identificacion_pista 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= identificacion_pista 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identificacion_pista ::= PR_PISTA ALFANUMERICO herencia_pistas SALTO INDENTACION cuerpo_pista 
            {
              Object RESULT =null;
		System.out.println("Se encontro una pista");
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("identificacion_pista",1, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-5)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // herencia_pistas ::= ALFANUMERICO 
            {
              Object RESULT =null;
		System.out.println("Alfanumerico");
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia_pistas",2, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // herencia_pistas ::= 
            {
              Object RESULT =null;
		System.out.println("Alfanumerico");
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia_pistas",2, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // cuerpo_pista ::= cuerpo_pista SALTO instruccion 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("cuerpo_pista",3, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cuerpo_pista ::= instruccion 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("cuerpo_pista",3, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion_tabulada ::= instruccion 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_tabulada",4, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= declaracion_variable 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion",5, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion_variable ::= instruccion_keep PR_VAR tipo variables 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",6, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-3)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion_keep ::= PR_KEEP 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_keep",7, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion_keep ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_keep",7, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo ::= PR_ENTERO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo ::= PR_DOBLE 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= variables ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("variables",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // variables ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("variables",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ServerParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ServerParser$do_action(
    int                        CUP$ServerParser$act_num,
    java_cup.runtime.lr_parser CUP$ServerParser$parser,
    java.util.Stack            CUP$ServerParser$stack,
    int                        CUP$ServerParser$top)
    throws java.lang.Exception
    {
              return CUP$ServerParser$do_action_part00000000(
                               CUP$ServerParser$act_num,
                               CUP$ServerParser$parser,
                               CUP$ServerParser$stack,
                               CUP$ServerParser$top);
    }
}

}