
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.froi.pruebagramaticareproductor.gramatica;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ServerParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ServerParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ServerParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ServerParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ServerParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\010\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\003\000\002\006\004\000" +
    "\002\006\003\000\002\010\004\000\002\010\003\000\002" +
    "\011\007\000\002\012\003\000\002\012\002\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\015\004\000\002\015\002\000\002\016\012\000\002" +
    "\017\003\000\002\017\002\000\002\020\002\000\002\021" +
    "\005\000\002\022\004\000\002\022\003\000\002\023\004" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\005\000\002\024\003\000\002\024\005\000\002" +
    "\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\004\004\005\001\002\000\006\002\uffff\004" +
    "\uffff\001\002\000\004\104\011\001\002\000\006\002\010" +
    "\004\005\001\002\000\006\002\000\004\000\001\002\000" +
    "\004\002\001\001\002\000\006\005\013\105\ufffc\001\002" +
    "\000\004\105\020\001\002\000\004\104\014\001\002\000" +
    "\006\046\ufffa\105\ufffa\001\002\000\006\046\016\105\ufffd" +
    "\001\002\000\004\104\017\001\002\000\006\046\ufffb\105" +
    "\ufffb\001\002\000\004\051\021\001\002\000\022\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\026\104" +
    "\ufff3\001\002\000\004\105\105\001\002\000\026\002\ufff6" +
    "\004\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\104\ufff6\001\002\000\020\006\035\007\040" +
    "\010\034\011\031\012\036\013\037\104\uffe7\001\002\000" +
    "\026\002\ufff8\004\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\014\ufff8\104\ufff8\001\002\000\020\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\104\ufff4" +
    "\001\002\000\026\002\ufffe\004\ufffe\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\026\104\ufff3\001\002" +
    "\000\026\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\104\ufff9\001\002\000\004" +
    "\104\uffef\001\002\000\004\104\067\001\002\000\004\104" +
    "\uffe8\001\002\000\004\104\ufff0\001\002\000\004\104\ufff2" +
    "\001\002\000\004\104\uffee\001\002\000\014\006\035\007" +
    "\040\010\034\011\031\012\036\001\002\000\004\104\ufff1" +
    "\001\002\000\004\104\042\001\002\000\010\046\uffec\053" +
    "\uffec\105\uffec\001\002\000\010\046\044\053\045\105\uffea" +
    "\001\002\000\004\104\066\001\002\000\010\044\052\103" +
    "\047\104\051\001\002\000\004\105\ufff5\001\002\000\016" +
    "\045\uffda\070\uffda\071\uffda\072\uffda\073\uffda\105\uffda\001" +
    "\002\000\016\045\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\105\uffdd\001\002\000\016\045\uffdb\070\uffdb\071\uffdb\072" +
    "\uffdb\073\uffdb\105\uffdb\001\002\000\010\044\052\103\047" +
    "\104\051\001\002\000\014\070\056\071\054\072\055\073" +
    "\057\105\uffeb\001\002\000\010\044\052\103\047\104\051" +
    "\001\002\000\010\044\052\103\047\104\051\001\002\000" +
    "\010\044\052\103\047\104\051\001\002\000\010\044\052" +
    "\103\047\104\051\001\002\000\016\045\uffde\070\uffde\071" +
    "\uffde\072\uffde\073\uffde\105\uffde\001\002\000\016\045\uffe1" +
    "\070\uffe1\071\uffe1\072\055\073\057\105\uffe1\001\002\000" +
    "\016\045\uffdf\070\uffdf\071\uffdf\072\uffdf\073\uffdf\105\uffdf" +
    "\001\002\000\016\045\uffe0\070\uffe0\071\uffe0\072\055\073" +
    "\057\105\uffe0\001\002\000\014\045\065\070\056\071\054" +
    "\072\055\073\057\001\002\000\016\045\uffdc\070\uffdc\071" +
    "\uffdc\072\uffdc\073\uffdc\105\uffdc\001\002\000\010\046\uffed" +
    "\053\uffed\105\uffed\001\002\000\004\044\070\001\002\000" +
    "\004\045\uffe6\001\002\000\004\045\072\001\002\000\004" +
    "\105\073\001\002\000\004\051\074\001\002\000\006\013" +
    "\ufff3\014\026\001\002\000\026\002\uffe9\004\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\104" +
    "\uffe9\001\002\000\004\105\104\001\002\000\004\013\037" +
    "\001\002\000\010\013\ufff3\014\026\052\103\001\002\000" +
    "\010\013\uffe3\014\uffe3\052\uffe3\001\002\000\010\013\uffe4" +
    "\014\uffe4\052\uffe4\001\002\000\026\002\uffe5\004\uffe5\006" +
    "\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\104\uffe5\001\002\000\010\013\uffe2\014\uffe2\052\uffe2\001" +
    "\002\000\026\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\104\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\002\001\001\000\004\005\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\026\010\024\011\021\012\023" +
    "\016\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\032\017\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\027\011\021\012\023\016\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\040\001\001\000\002\001\001" +
    "\000\004\014\042\001\001\000\002\001\001\000\004\015" +
    "\045\001\001\000\002\001\001\000\006\024\052\025\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\024\063\025\047\001\001" +
    "\000\002\001\001\000\006\024\062\025\047\001\001\000" +
    "\006\024\061\025\047\001\001\000\006\024\060\025\047" +
    "\001\001\000\006\024\057\025\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\074\001\001\000\012\011" +
    "\075\012\076\022\077\023\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\075\012" +
    "\076\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ServerParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ServerParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ServerParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ServerParser(ServerLexer lexer) {
        super(lexer);
    }
      public void report_error(String message, Object info) {
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info) {
        System.out.println("reportfatal");
    }
    public void syntax_error(Symbol cur_token) {
        System.out.println("syntaxerr " + symbl_name_from_id(cur_token.sym) + " " + cur_token.left + " - " + cur_token.right);
    }
    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ServerParser$actions {
  private final ServerParser parser;

  /** Constructor */
  CUP$ServerParser$actions(ServerParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ServerParser$do_action_part00000000(
    int                        CUP$ServerParser$act_num,
    java_cup.runtime.lr_parser CUP$ServerParser$parser,
    java.util.Stack            CUP$ServerParser$stack,
    int                        CUP$ServerParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ServerParser$result;

      /* select the action based on the action number */
      switch (CUP$ServerParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)).value;
		RESULT = start_val;
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ServerParser$parser.done_parsing();
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= inicio identificacion_pista 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= identificacion_pista 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identificacion_pista ::= PR_PISTA ALFANUMERICO herencia_pistas SALTO INDENTACION cuerpo_pista 
            {
              Object RESULT =null;
		System.out.println("Se encontro una pista");
              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("identificacion_pista",1, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-5)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // herencia_pistas ::= PR_EXTIENDE herencia 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia_pistas",2, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // herencia_pistas ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia_pistas",2, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // herencia ::= herencia COMA ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia",3, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // herencia ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("herencia",3, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cuerpo_pista ::= cuerpo_pista instruccion 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("cuerpo_pista",4, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cuerpo_pista ::= instruccion 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("cuerpo_pista",4, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= declaracion_variable SALTO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion_procedimiento 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion",6, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_variable ::= instruccion_keep PR_VAR tipo variables asignacion_valores 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("declaracion_variable",7, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-4)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion_keep ::= PR_KEEP 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_keep",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion_keep ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_keep",8, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo ::= PR_ENTERO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= PR_DOBLE 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo",9, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables ::= variables COMA ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("variables",10, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("variables",10, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion_valores ::= IGUAL operacion_valor 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("asignacion_valores",11, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignacion_valores ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("asignacion_valores",11, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_procedimiento ::= instruccion_keep tipo_procedimientos ALFANUMERICO PARA parametros_procedimiento PARC SALTO cuerpo_procedimiento 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("declaracion_procedimiento",12, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-7)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_procedimientos ::= tipo 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo_procedimientos",13, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_procedimientos ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("tipo_procedimientos",13, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_procedimiento ::= 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("parametros_procedimiento",14, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo_procedimiento ::= INDENTACION instrucciones_proceso DENDENTACION 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("cuerpo_procedimiento",15, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instrucciones_proceso ::= instrucciones_proceso instruccion_proceso 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instrucciones_proceso",16, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instrucciones_proceso ::= instruccion_proceso 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instrucciones_proceso",16, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion_proceso ::= declaracion_variable SALTO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("instruccion_proceso",17, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-1)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion_valor ::= operacion_valor SUMA operacion_valor 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion_valor ::= operacion_valor RESTA operacion_valor 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion_valor ::= operacion_valor MULTIPLICACION operacion_valor 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion_valor ::= operacion_valor DIVISION operacion_valor 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion_valor ::= valor_general 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion_valor ::= PARA operacion_valor PARC 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("operacion_valor",18, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.elementAt(CUP$ServerParser$top-2)), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor_general ::= ALFANUMERICO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("valor_general",19, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // valor_general ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ServerParser$result = parser.getSymbolFactory().newSymbol("valor_general",19, ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ServerParser$stack.peek()), RESULT);
            }
          return CUP$ServerParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ServerParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ServerParser$do_action(
    int                        CUP$ServerParser$act_num,
    java_cup.runtime.lr_parser CUP$ServerParser$parser,
    java.util.Stack            CUP$ServerParser$stack,
    int                        CUP$ServerParser$top)
    throws java.lang.Exception
    {
              return CUP$ServerParser$do_action_part00000000(
                               CUP$ServerParser$act_num,
                               CUP$ServerParser$parser,
                               CUP$ServerParser$stack,
                               CUP$ServerParser$top);
    }
}

}
