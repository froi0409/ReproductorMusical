// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: ServerLexer.jflex

package com.froi.pruebagramaticareproductor.gramatica;

import java_cup.runtime.*;
import static com.froi.pruebagramaticareproductor.gramatica.ServerParserSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class ServerLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\3\0\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\12\17\1\0\1\20"+
    "\1\21\1\22\1\23\2\0\1\17\1\24\1\25\1\26"+
    "\1\27\1\30\1\17\1\31\2\17\1\32\1\33\1\34"+
    "\1\17\1\35\1\36\1\17\1\37\1\40\1\41\1\17"+
    "\1\42\4\17\1\43\1\0\1\44\1\45\2\0\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\32\1\60\1\61\1\62\1\63\1\64\1\17"+
    "\1\65\1\66\1\67\1\70\1\42\1\71\1\72\1\17"+
    "\1\73\1\0\1\74\u0183\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\1\1\21\17\16\1\22\1\23\1\24"+
    "\1\25\1\0\1\26\1\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\0\1\34\1\35\1\36\1\0\26\16\1\37"+
    "\4\16\1\40\1\41\2\0\35\16\1\42\1\0\3\16"+
    "\1\43\11\16\1\44\5\16\1\45\5\16\1\46\2\16"+
    "\1\47\6\16\1\50\3\16\1\51\1\52\1\53\4\16"+
    "\1\54\7\16\1\55\4\16\1\56\6\16\1\57\1\16"+
    "\1\60\3\16\1\61\1\62\3\16\1\63\1\64\2\16"+
    "\1\65\1\16\1\66\2\16\1\67\1\16\1\70\1\71"+
    "\1\16\1\72\1\73\1\74\3\16\1\75\1\76\1\16"+
    "\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\75\0\75\0\267\0\75\0\364"+
    "\0\75\0\75\0\75\0\u0131\0\75\0\u016e\0\75\0\u01ab"+
    "\0\75\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\75\0\75\0\75\0\75\0\u0632"+
    "\0\75\0\u066f\0\75\0\75\0\75\0\75\0\75\0\u06ac"+
    "\0\75\0\75\0\75\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\75"+
    "\0\75\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\u10eb"+
    "\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3"+
    "\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb"+
    "\0\u01ab\0\u14f8\0\u1535\0\u1572\0\u15af\0\u01ab\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u01ab"+
    "\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u01ab\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u01ab\0\u1a73\0\u1ab0\0\u01ab\0\u1aed"+
    "\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e\0\u01ab\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u01ab\0\u01ab\0\u01ab\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\u01ab\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u01ab\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u01ab\0\u2250\0\u01ab\0\u228d"+
    "\0\u22ca\0\u2307\0\u01ab\0\u01ab\0\u2344\0\u2381\0\u23be\0\u01ab"+
    "\0\u01ab\0\u23fb\0\u2438\0\u01ab\0\u2475\0\u01ab\0\u24b2\0\u24ef"+
    "\0\u01ab\0\u252c\0\u01ab\0\u01ab\0\u2569\0\u01ab\0\u01ab\0\u01ab"+
    "\0\u25a6\0\u25e3\0\u2620\0\u01ab\0\u01ab\0\u265d\0\u01ab\0\u01ab";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\20\1\25"+
    "\1\26\1\27\1\30\1\31\1\20\1\32\2\20\1\34"+
    "\1\35\1\20\1\36\1\37\1\40\1\41\1\42\4\20"+
    "\1\2\76\0\1\3\100\0\1\47\1\0\1\50\12\0"+
    "\1\51\51\0\1\52\7\0\1\53\64\0\1\54\13\0"+
    "\1\55\6\0\1\56\67\0\1\57\76\0\1\20\4\0"+
    "\17\20\3\0\26\20\16\0\1\60\4\0\1\61\74\0"+
    "\1\62\74\0\1\63\1\64\70\0\1\20\4\0\17\20"+
    "\3\0\15\20\1\65\10\20\20\0\1\20\4\0\17\20"+
    "\3\0\1\66\7\20\1\67\4\20\1\70\10\20\20\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\71\10\20\1\72"+
    "\10\20\20\0\1\20\4\0\17\20\3\0\14\20\1\73"+
    "\3\20\1\74\3\20\1\75\1\20\20\0\1\20\4\0"+
    "\17\20\3\0\1\76\25\20\20\0\1\20\4\0\17\20"+
    "\3\0\1\77\25\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\100\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\10\20\1\101\4\20\1\102\10\20\20\0\1\20\4\0"+
    "\17\20\3\0\4\20\1\103\3\20\1\104\15\20\20\0"+
    "\1\20\4\0\17\20\3\0\17\20\1\105\6\20\20\0"+
    "\1\20\4\0\17\20\3\0\1\106\7\20\1\107\6\20"+
    "\1\110\6\20\20\0\1\20\4\0\17\20\3\0\1\111"+
    "\3\20\1\112\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\10\20\1\113\11\20\1\114\1\115\2\20\20\0\1\20"+
    "\4\0\17\20\3\0\17\20\1\116\6\20\20\0\1\20"+
    "\4\0\17\20\3\0\1\117\25\20\10\0\1\120\161\0"+
    "\1\121\15\122\1\123\57\122\2\64\1\5\1\0\71\64"+
    "\17\0\1\20\4\0\17\20\3\0\15\20\1\124\10\20"+
    "\20\0\1\20\4\0\17\20\3\0\3\20\1\125\13\20"+
    "\1\126\1\127\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\17\20\1\130\6\20\20\0\1\20\4\0\17\20\3\0"+
    "\14\20\1\131\11\20\20\0\1\20\4\0\17\20\3\0"+
    "\5\20\1\132\20\20\20\0\1\20\4\0\17\20\3\0"+
    "\1\20\1\133\24\20\20\0\1\20\4\0\17\20\3\0"+
    "\21\20\1\134\4\20\20\0\1\20\4\0\17\20\3\0"+
    "\16\20\1\135\7\20\20\0\1\20\4\0\17\20\3\0"+
    "\21\20\1\136\4\20\20\0\1\20\4\0\17\20\3\0"+
    "\12\20\1\137\13\20\20\0\1\20\4\0\17\20\3\0"+
    "\2\20\1\140\23\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\141\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\20\20\1\142\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\14\20\1\143\11\20\20\0\1\20\4\0\17\20\3\0"+
    "\14\20\1\144\11\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\145\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\3\20\1\146\22\20\20\0\1\20\4\0\17\20\3\0"+
    "\17\20\1\147\6\20\20\0\1\20\4\0\17\20\3\0"+
    "\20\20\1\150\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\10\20\1\151\15\20\20\0\1\20\4\0\17\20\3\0"+
    "\14\20\1\152\11\20\20\0\1\20\4\0\17\20\3\0"+
    "\16\20\1\153\2\20\1\154\4\20\20\0\1\20\4\0"+
    "\17\20\3\0\14\20\1\155\11\20\20\0\1\20\4\0"+
    "\17\20\3\0\13\20\1\156\12\20\20\0\1\20\4\0"+
    "\17\20\3\0\10\20\1\157\15\20\20\0\1\20\4\0"+
    "\17\20\3\0\22\20\1\160\3\20\20\0\1\20\4\0"+
    "\17\20\3\0\17\20\1\161\6\20\1\0\15\122\1\162"+
    "\57\122\15\0\1\123\5\0\1\5\70\0\1\20\4\0"+
    "\17\20\3\0\12\20\1\163\13\20\20\0\1\20\4\0"+
    "\17\20\3\0\4\20\1\164\21\20\20\0\1\20\4\0"+
    "\17\20\3\0\1\165\25\20\20\0\1\20\4\0\17\20"+
    "\3\0\15\20\1\166\10\20\20\0\1\20\4\0\17\20"+
    "\3\0\2\20\1\167\23\20\20\0\1\20\4\0\17\20"+
    "\3\0\21\20\1\170\4\20\20\0\1\20\4\0\17\20"+
    "\3\0\1\171\25\20\20\0\1\20\4\0\17\20\3\0"+
    "\12\20\1\172\13\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\173\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\174\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\10\20\1\175\15\20\20\0\1\20\4\0\17\20\3\0"+
    "\20\20\1\176\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\177\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\16\20\1\200\7\20\20\0\1\20\4\0\17\20\3\0"+
    "\21\20\1\201\4\20\20\0\1\20\4\0\17\20\3\0"+
    "\6\20\1\202\17\20\20\0\1\20\4\0\17\20\3\0"+
    "\20\20\1\203\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\14\20\1\204\11\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\205\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\1\206\25\20\20\0\1\20\4\0\17\20\3\0\21\20"+
    "\1\207\4\20\20\0\1\20\4\0\17\20\3\0\14\20"+
    "\1\210\11\20\20\0\1\20\4\0\17\20\3\0\3\20"+
    "\1\211\22\20\20\0\1\20\4\0\17\20\3\0\17\20"+
    "\1\212\6\20\20\0\1\20\4\0\17\20\3\0\15\20"+
    "\1\213\10\20\20\0\1\20\4\0\17\20\3\0\15\20"+
    "\1\214\10\20\20\0\1\20\4\0\17\20\3\0\1\215"+
    "\25\20\20\0\1\20\4\0\17\20\3\0\21\20\1\216"+
    "\4\20\20\0\1\20\4\0\17\20\3\0\4\20\1\217"+
    "\21\20\1\0\15\122\1\162\5\122\1\5\51\122\17\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\220\21\20\20\0"+
    "\1\20\4\0\17\20\3\0\14\20\1\221\11\20\20\0"+
    "\1\20\4\0\17\20\3\0\2\20\1\222\23\20\20\0"+
    "\1\20\4\0\17\20\3\0\22\20\1\223\3\20\20\0"+
    "\1\20\4\0\17\20\3\0\10\20\1\224\15\20\20\0"+
    "\1\20\4\0\17\20\3\0\22\20\1\225\3\20\20\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\226\21\20\20\0"+
    "\1\20\4\0\17\20\3\0\17\20\1\227\6\20\20\0"+
    "\1\20\4\0\17\20\3\0\17\20\1\230\6\20\20\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\231\21\20\20\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\232\21\20\20\0"+
    "\1\20\4\0\17\20\3\0\17\20\1\233\6\20\20\0"+
    "\1\20\4\0\17\20\3\0\1\234\25\20\20\0\1\20"+
    "\4\0\17\20\3\0\10\20\1\235\15\20\20\0\1\20"+
    "\4\0\17\20\3\0\1\236\25\20\20\0\1\20\4\0"+
    "\17\20\3\0\21\20\1\237\4\20\20\0\1\20\4\0"+
    "\17\20\3\0\14\20\1\240\11\20\20\0\1\20\4\0"+
    "\17\20\3\0\1\241\25\20\20\0\1\20\4\0\17\20"+
    "\3\0\2\20\1\242\23\20\20\0\1\20\4\0\17\20"+
    "\3\0\15\20\1\243\10\20\20\0\1\20\4\0\17\20"+
    "\3\0\15\20\1\244\10\20\20\0\1\20\4\0\17\20"+
    "\3\0\17\20\1\245\6\20\20\0\1\20\4\0\17\20"+
    "\3\0\17\20\1\246\6\20\20\0\1\20\4\0\17\20"+
    "\3\0\2\20\1\247\23\20\20\0\1\20\4\0\17\20"+
    "\3\0\1\250\25\20\20\0\1\20\4\0\17\20\3\0"+
    "\1\251\25\20\20\0\1\20\4\0\17\20\3\0\21\20"+
    "\1\252\4\20\20\0\1\20\4\0\17\20\3\0\12\20"+
    "\1\253\13\20\20\0\1\20\4\0\17\20\3\0\14\20"+
    "\1\254\11\20\20\0\1\20\4\0\17\20\3\0\12\20"+
    "\1\255\13\20\20\0\1\20\4\0\17\20\3\0\15\20"+
    "\1\256\10\20\20\0\1\20\4\0\17\20\3\0\1\257"+
    "\25\20\20\0\1\20\4\0\17\20\3\0\14\20\1\260"+
    "\11\20\20\0\1\20\4\0\17\20\3\0\21\20\1\261"+
    "\4\20\20\0\1\20\4\0\17\20\3\0\11\20\1\262"+
    "\14\20\20\0\1\20\4\0\17\20\3\0\17\20\1\263"+
    "\6\20\20\0\1\20\4\0\17\20\3\0\1\264\25\20"+
    "\20\0\1\20\4\0\17\20\3\0\20\20\1\265\5\20"+
    "\20\0\1\20\4\0\17\20\3\0\10\20\1\266\15\20"+
    "\20\0\1\20\4\0\17\20\3\0\13\20\1\267\12\20"+
    "\20\0\1\20\4\0\17\20\3\0\3\20\1\270\22\20"+
    "\20\0\1\20\4\0\17\20\3\0\14\20\1\271\11\20"+
    "\20\0\1\20\4\0\17\20\3\0\10\20\1\272\15\20"+
    "\20\0\1\20\4\0\17\20\3\0\7\20\1\273\16\20"+
    "\20\0\1\20\4\0\17\20\3\0\14\20\1\274\11\20"+
    "\20\0\1\20\4\0\17\20\3\0\4\20\1\275\21\20"+
    "\20\0\1\20\4\0\17\20\3\0\1\276\25\20\20\0"+
    "\1\20\4\0\17\20\3\0\22\20\1\277\3\20\20\0"+
    "\1\20\4\0\17\20\3\0\21\20\1\300\4\20\20\0"+
    "\1\20\4\0\17\20\3\0\17\20\1\301\6\20\20\0"+
    "\1\20\4\0\17\20\3\0\3\20\1\302\22\20\20\0"+
    "\1\20\4\0\17\20\3\0\22\20\1\303\3\20\20\0"+
    "\1\20\4\0\17\20\3\0\4\20\1\304\21\20\20\0"+
    "\1\20\4\0\17\20\3\0\1\305\25\20\20\0\1\20"+
    "\4\0\17\20\3\0\17\20\1\306\6\20\20\0\1\20"+
    "\4\0\17\20\3\0\16\20\1\307\7\20\20\0\1\20"+
    "\4\0\17\20\3\0\22\20\1\310\3\20\20\0\1\20"+
    "\4\0\17\20\3\0\1\311\25\20\20\0\1\20\4\0"+
    "\17\20\3\0\25\20\1\312\20\0\1\20\4\0\17\20"+
    "\3\0\17\20\1\313\6\20\20\0\1\20\4\0\17\20"+
    "\3\0\17\20\1\314\6\20\20\0\1\20\4\0\17\20"+
    "\3\0\1\315\25\20\20\0\1\20\4\0\17\20\3\0"+
    "\4\20\1\316\21\20\20\0\1\20\4\0\17\20\3\0"+
    "\3\20\1\317\22\20\20\0\1\20\4\0\17\20\3\0"+
    "\20\20\1\320\5\20\20\0\1\20\4\0\17\20\3\0"+
    "\1\321\25\20\20\0\1\20\4\0\17\20\3\0\2\20"+
    "\1\322\23\20\20\0\1\20\4\0\17\20\3\0\1\323"+
    "\25\20\20\0\1\20\4\0\17\20\3\0\17\20\1\324"+
    "\6\20\20\0\1\20\4\0\17\20\3\0\12\20\1\325"+
    "\13\20\20\0\1\20\4\0\17\20\3\0\10\20\1\326"+
    "\15\20\20\0\1\20\4\0\17\20\3\0\17\20\1\327"+
    "\6\20\20\0\1\20\4\0\17\20\3\0\17\20\1\330"+
    "\6\20\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9882];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\2\11\1\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\22\1\4\11"+
    "\1\0\1\11\1\0\5\11\1\0\3\11\1\0\33\1"+
    "\2\11\2\0\36\1\1\0\146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*CODIGO AÑADIDO*/
    int nivelIndentacion = 0;

    public int verificarIndentacion(String tabulaciones) {
        
        String tab = tabulaciones + ".";
        String tabArray[] = tab.split("\t");
        System.out.println("\n\nnivel actual: " + nivelIndentacion + "\nIndentacion Nueva: " + (tabArray.length-1) + "\n\n");
        return tabArray.length - 1;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ServerLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    /*CODIGO EJECUTADO AL FINAL DEL ANALISIS*/
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { /*Se ejecuta al encontrar un error léxico*/
            }
            // fall through
          case 65: break;
          case 2:
            { int indentacionActual = verificarIndentacion(yytext());
                                    if(indentacionActual == nivelIndentacion) {
                                        /*Ignore*/
                                    } else if(indentacionActual > nivelIndentacion) {
                                        nivelIndentacion = indentacionActual;
                                        System.out.println("INDENTACION"); 
                                        return new Symbol(INDENTACION, yyline+1, yycolumn+1, yytext());
                                    } else if (indentacionActual < nivelIndentacion) {
                                        nivelIndentacion = indentacionActual;
                                        System.out.println("DENDENTACION"); 
                                        return new Symbol(DENDENTACION, yyline+1, yycolumn+1, yytext());
                                    }
            }
            // fall through
          case 66: break;
          case 3:
            { System.out.println("SALTO"); return new Symbol(SALTO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 67: break;
          case 4:
            { /*IGNORE*/
            }
            // fall through
          case 68: break;
          case 5:
            { System.out.println("NOT"); return new Symbol(NOT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 6:
            { System.out.println("MODULO"); return new Symbol(MODULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 7:
            { System.out.println("PARA"); return new Symbol(PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 8:
            { System.out.println("PARC"); return new Symbol(PARC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 9:
            { System.out.println("MULTIPLICACION"); return new Symbol(MULTIPLICACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 10:
            { System.out.println("SUMA"); return new Symbol(SUMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 11:
            { System.out.println("COMA"); return new Symbol(COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 12:
            { System.out.println("RESTA"); return new Symbol(RESTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 13:
            { System.out.println("DIVISION"); return new Symbol(DIVISION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 14:
            { System.out.println("ALFANUMERICO"); return new Symbol(ALFANUMERICO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 15:
            { System.out.println("PUNTO_COMA"); return new Symbol(PUNTO_COMA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 16:
            { System.out.println("MENOR_QUE"); return new Symbol(MENOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 17:
            { System.out.println("MAYOR_QUE"); return new Symbol(MAYOR_QUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 18:
            { System.out.println("CORA"); return new Symbol(CORA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 19:
            { System.out.println("CORC"); return new Symbol(CORC, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 20:
            { System.out.println("POTENCIA"); return new Symbol(POTENCIA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 21:
            { System.out.println("NULO"); return new Symbol(NULO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 22:
            { System.out.println("DIFERENCIACION"); return new Symbol(DIFERENCIACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 23:
            { System.out.println("AND"); return new Symbol(AND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 24:
            { System.out.println("XOR"); return new Symbol(XOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 25:
            { System.out.println("SUMA_EN_UNO"); return new Symbol(SUMA_EN_UNO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 26:
            { System.out.println("SUMA_SIMPLIFICADA"); return new Symbol(SUMA_SIMPLIFICADA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 27:
            { System.out.println("RESTA_EN_UNO"); return new Symbol(RESTA_EN_UNO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 28:
            { System.out.println("MENOR_IGUAL"); return new Symbol(MENOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 29:
            { System.out.println("IGUALACION"); return new Symbol(IGUALACION, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 30:
            { System.out.println("MAYOR_IGUAL"); return new Symbol(MAYOR_IGUAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 31:
            { System.out.println("SI"); return new Symbol(PR_SI, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 32:
            { System.out.println("NAND"); return new Symbol(NAND, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 33:
            { System.out.println("NOR"); return new Symbol(NOR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 34:
            { System.out.println("VAR"); return new Symbol(PR_VAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 35:
            { System.out.println("CASO"); return new Symbol(PR_CASO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 36:
            { System.out.println("KEEP"); return new Symbol(PR_KEEP, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 37:
            { System.out.println("PARA"); return new Symbol(PR_PARA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 38:
            { System.out.println("SINO"); return new Symbol(PR_SINO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 39:
            { System.out.println("TRUE"); return new Symbol(TRUE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 40:
            { System.out.println("DOBLE"); return new Symbol(PR_DOBLE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 41:
            { System.out.println("FALSE"); return new Symbol(FALSE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 42:
            { System.out.println("HACER"); return new Symbol(PR_HACER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 43:
            { System.out.println("LISTA"); return new Symbol(PR_LISTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 44:
            { System.out.println("PISTA"); return new Symbol(PR_PISTA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 45:
            { System.out.println("CADENA"); return new Symbol(PR_CADENA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 46:
            { System.out.println("ENTERO"); return new Symbol(PR_ENTERO, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 47:
            { System.out.println("PISTAS"); return new Symbol(PR_PISTAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 48:
            { System.out.println("RANDOM"); return new Symbol(PR_RANDOM, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 49:
            { System.out.println("SWITCH"); return new Symbol(PR_SWITCH, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 50:
            { System.out.println("BOOLEAN"); return new Symbol(PR_BOOLEAN, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 51:
            { System.out.println("DEFAULT"); return new Symbol(PR_DEFAULT, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 52:
            { System.out.println("ESPERAR"); return new Symbol(PR_ESPERAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 53:
            { System.out.println("MENSAJE"); return new Symbol(PR_MENSAJE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 54:
            { System.out.println("ORDENAR"); return new Symbol(PR_ORDENAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 55:
            { System.out.println("RETORNA"); return new Symbol(PR_RETORNA, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 56:
            { System.out.println("CARACTER"); return new Symbol(PR_CARACTER, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 57:
            { System.out.println("CIRCULAR"); return new Symbol(PR_CIRCULAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 58:
            { System.out.println("EXTIENDE"); return new Symbol(PR_EXTIENDE, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 59:
            { System.out.println("LONGITUD"); return new Symbol(PR_LONGITUD, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 60:
            { System.out.println("MIENTRAS"); return new Symbol(PR_MIENTRAS, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 61:
            { System.out.println("CONTINUAR"); return new Symbol(PR_CONTINUAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 62:
            { System.out.println("PRINCIPAL"); return new Symbol(PR_PRINCIPAL, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 63:
            { System.out.println("SUMARIZAR"); return new Symbol(PR_SUMARIZAR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 64:
            { System.out.println("REPRODUCIR"); return new Symbol(PR_REPRODUCIR, yyline+1, yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
